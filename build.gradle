plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

ext {
    major = 0
    minor = 1
    patch = getCommitCount()
}

group = 'com.goodzza'
version = "$major.$minor.$patch"

sourceCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.bootBuildImage {

    String dockerUrl;
    String dockerImageName;
    String dockerUsername;
    String dockerPassword;
    String tag;

    if( project.hasProperty("dockerUrl") )
        dockerUrl = project.property("dockerUrl");
    if( project.hasProperty("dockerImageName") )
        dockerImageName = project.property("dockerImageName");
    if( project.hasProperty("dockerUsername") )
        dockerUsername = project.property("dockerUsername");
    if( project.hasProperty("dockerPassword") )
        dockerPassword = project.property("dockerPassword");
    if( project.hasProperty("tag") )
        tag = project.property("tag");

    System.out.println("dockerUrl: " + dockerUrl);
    System.out.println("dockerImageName: " + dockerImageName);
    System.out.println("dockerUsername: " + dockerUsername);
    System.out.println("dockerPassword: " + dockerPassword);
    System.out.println("tag: " + tag);
    System.out.println("project.version: " + project.version);


    if(dockerUrl != null){
        publish = true

        builder = "paketobuildpacks/builder@sha256:3c5f88e55da475957bd03b4d6e852e0938bb73ee1a5184ae291a7566ca83d97f"
        runImage = "paketobuildpacks/run@sha256:562ddd10160a2629168a0108894766b46dff7f4b0db263ecabe35cd56fcbe56d"
        imageName = "${dockerImageName ?: project.name }:${tag ?: project.version}"
        System.out.println("imageName: " + imageName);

        docker {
            publishRegistry {
                url = dockerUrl
                username = dockerUsername
                password = dockerPassword
            }
        }
    }
}

int getCommitCount() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', 'HEAD'
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
}
